{"title":"vue更新数据后视图没有刷新的问题","date":"2019-01-24T03:23:56.000Z","slug":"vue-model-view","comments":true,"tags":["Vue"],"categories":["前端"],"updated":"2019-01-24T08:40:24.047Z","content":"<p>最近一直在用 Vue 做项目，遇到了个问题：在某些情况下，数据改变后视图并没有没有更新。这个问题其实我之前就遇到过一次，当时翻了文档解决了，也没有特意去深入研究一下这个问题，今天又遇到了这个问题，我就趁这次机会再总结一下。</p>\n<a id=\"more\"></a>\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>我写了个demo简单描述一下我遇到的问题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/vue/2.5.22/vue.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>name: &#123;&#123;info.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ege: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"info.age\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClear\"</span>&gt;</span>clear<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      el: <span class=\"string\">\"#app\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        info: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          name: <span class=\"string\">\"aaa\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        response: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          age: 18</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.info = <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>.info, <span class=\"keyword\">this</span>.response)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        onClear() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">this</span>.info.age = <span class=\"string\">\"\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里的需求应该挺好理解：页面元素绑定了<code>info</code>对象，<code>response</code>对象是我请求到的数据，我将我请求到的数据用<code>assingn</code>方法合并到<code>info</code>对象中。</p>\n<p>这一步看起来是没有问题的，页面显示也是正常的。</p>\n<div class=\"article-img\"><p><img src=\"https://cdn.zhoushuo.me/blog/images/20190124162939.png\" alt=\"截图\"></p></div>\n<p>接下来我需要做一个清除操作，点击旁边的clear按钮触发<code>onClear</code>函数，清空input里的内容。但是，单击之后会发现，页面没有任何变化。</p>\n<p>把<code>info</code>打出来看一下：</p>\n<div class=\"article-img\"><p><img src=\"https://cdn.zhoushuo.me/blog/images/20190124163030.png\" alt=\"截图\"></p></div>\n<p><code>info.name</code>确实已经被更改了，但是视图并没有刷新。很明显，vue并没有检测到数据的改动。</p>\n<h1 id=\"Vue如何追踪变化\"><a href=\"#Vue如何追踪变化\" class=\"headerlink\" title=\"Vue如何追踪变化\"></a>Vue如何追踪变化</h1><p>解决这个问题之前，我们先来简单了解一下vue是如何追踪数据变化的：</p>\n<blockquote>\n<p>把一个普通的 JavaScript 对象传给 Vue 实例的 <code>data</code> 选项，Vue 将遍历此对象所有的属性，并使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">Object.defineProperty</a> 把这些属性全部转为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E5%AE%9A%E4%B9%89_getters_%E4%B8%8E_setters\" target=\"_blank\" rel=\"noopener\">getter/setter</a>。</p>\n<p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。 </p>\n</blockquote>\n<p>在读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性时，会调用setter函数并传入新值，这个函数负责决定如何处理数据。当对象下的访问器属性值发生了改变之后， 那么就会调用setter函数，这时vue就可以通过这个setter函数来追踪变化，调用相关函数来实现view视图的更新。</p>\n<h1 id=\"对象更改检测\"><a href=\"#对象更改检测\" class=\"headerlink\" title=\"对象更改检测\"></a>对象更改检测</h1><p>现在回过头来看前面的问题，其实已经很明显了。因为 Vue 是通过递归遍历初始数据中的所有属性，并用 <code>Object.defineProperty</code> 把它们转化为 getter 和 setter 来实现数据观察的。如果一个属性在实例创建时不存在于初始数据中，那么 Vue 就没有办法观察这个属性了。 </p>\n<p>当我使用<code>Object.assign</code>方法合并对象的时候其实是把<code>response</code>里的属性添加到了<code>info</code>对象里，那这时候vue是没办法观察这个属性的。</p>\n<p>其实 Vue 文档里也提到了这个问题，怪我我看得时候不够认真(🤐)…</p>\n<blockquote>\n<p>受现代 JavaScript 的限制 (而且 <code>Object.observe</code> 也已经被废弃)，Vue <strong>不能检测到对象属性的添加或删除</strong>。 由于 Vue 会在初始化实例时对属性执行 <code>getter/setter</code> 转化过程，所以属性必须在 <code>data</code> 对象上存在才能让 Vue 转换它，这样才能让它是响应的。 </p>\n</blockquote>\n<p>解决这个问题，我们可以使用 Vue 的全局 <code>Vue.set</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(app.info, <span class=\"string\">'age'</span>, <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n<p>还可以使用实例方法<code>vm.$set</code>，其实就是全局 <code>Vue.set</code>方法的别名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$set(info, <span class=\"string\">'age'</span>, <span class=\"string\">''</span>)\t<span class=\"comment\">// 这里的this指向‘app’实例</span></span><br></pre></td></tr></table></figure>\n<p>通过调用这些方法添加或者删除属性，就能够触发所对应的 DOM 更新。 </p>\n<p>如果是为已有对象对象赋予多个新属性（也就是我遇到的这种情况），比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。在这种情况下，应该创建并合并到一个新对象里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this.info = Object.assign(this.info, this.request)</span></span><br><span class=\"line\"><span class=\"comment\">// 替换为：</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.info = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.info, <span class=\"keyword\">this</span>.response)</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组更改检测\"><a href=\"#数组更改检测\" class=\"headerlink\" title=\"数组更改检测\"></a>数组更改检测</h1><p>vue官网还提到了关于数组更改检测</p>\n<blockquote>\n<p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p>\n<ol>\n<li>当你利用索引直接设置一个项时，例如：<code>vm.items[indexOfItem] = newValue</code></li>\n<li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.items[<span class=\"number\">1</span>] = <span class=\"string\">'x'</span> <span class=\"comment\">// 不是响应性的</span></span><br><span class=\"line\">vm.items.length = <span class=\"number\">2</span> <span class=\"comment\">// 不是响应性的</span></span><br></pre></td></tr></table></figure>\n<p>这两种情况也是数组都确实被更新了，只是vue并没有检测到数组的更新，所以并不会更到视图中。</p>\n<p>针对第一种情况，我们可以使用跟上面同样的方法解决，或者使用 <code>splice</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vue.set</span></span><br><span class=\"line\">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"><span class=\"comment\">// vm.set</span></span><br><span class=\"line\">vm.$set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.splice</span></span><br><span class=\"line\">vm.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</span><br></pre></td></tr></table></figure>\n<p>第二个问题，也可以使用 <code>splice</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure>\n","next":{"title":"Vue组件间的通信","slug":"vue-component-communication"},"link":"https://blog.zhoushuo.me/post/vue-model-view/","toc":[{"title":"场景","id":"场景","index":"1"},{"title":"Vue如何追踪变化","id":"Vue如何追踪变化","index":"2"},{"title":"对象更改检测","id":"对象更改检测","index":"3"},{"title":"数组更改检测","id":"数组更改检测","index":"4"}],"copyright":{"author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/post/vue-model-view/\" title=\"vue更新数据后视图没有刷新的问题\">https://blog.zhoushuo.me/post/vue-model-view/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2019年1月24日"}}