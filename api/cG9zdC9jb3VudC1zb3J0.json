{"title":"计数排序解析及JavaScript实现","date":"2018-02-26T14:32:45.000Z","link":"post/count-sort","comments":true,"tags":["JavaScript","算法"],"categories":["前端"],"updated":"2019-02-15T03:17:22.886Z","content":"<p>计数排序（Counting sort）是一种稳定的线性时间排序算法。</p>\n<p>计数排序使用一个额外的数组}<code>C</code> ，其中第i个元素是待排序数组 <code>A</code> 中值等于 <code>i</code> 的元素的个数。然后根据数组 <code>C</code> 来将 <code>A</code> 中的元素排到正确的位置。当输入的元素是 <code>n</code> 个 <code>0</code> 到 <code>k</code> 之间的整数时，它的运行时间是 <code>Θ(n+k)</code>。计数排序不是比较排序，排序的速度快于任何比较排序算法。</p>\n<a id=\"more\"></a>\n<p>由于用来计数的数组 <code>C</code> 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。</p>\n<h2 id=\"计数算法步骤\">计数算法步骤<a href=\"post/count-sort#计数算法步骤\"></a></h2><ol>\n<li>找出待排序的数组中最大和最小的元素</li>\n<li>统计数组中每个值为 <code>i</code> 的元素出现的次数，存入数组 <code>C</code> 的第 <code>i</code> 项</li>\n<li>对所有的计数累加（从 <code>C</code> 中的第一个元素开始，每一项和前一项相加）</li>\n<li>反向填充目标数组：将每个元素 <code>i</code> 放在新数组的第 <code>C [i]</code> 项，每放一个元素就将 <code>C[i]</code> 减去1</li>\n</ol>\n<h2 id=\"流程图\">流程图<a href=\"post/count-sort#流程图\"></a></h2><p><img src=\"https://cdn.zhoushuo.me/countsort.jpg\" alt=\"计数排序流程图\" class=\"article-img\"></p>\n<h2 id=\"JavaScript代码实现\">JavaScript代码实现<a href=\"post/count-sort#JavaScript代码实现\"></a></h2><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countSort</span>(<span class=\"params\">arr,min,max</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len =arr.length,</span><br><span class=\"line\">      <span class=\"comment\">// 桶数组 </span></span><br><span class=\"line\">      count = [],</span><br><span class=\"line\">      <span class=\"comment\">// 输出数组  </span></span><br><span class=\"line\">      result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找出输入数组中最大值和最小值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max.apply(&#123;&#125;,arr);</span><br><span class=\"line\">      min = <span class=\"built_in\">Math</span>.min.apply(&#123;&#125;,arr);</span><br><span class=\"line\">  <span class=\"comment\">// 初始化桶数组，从最小值开始，到最大值结束</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = min; i &lt;= max; i++)&#123;</span><br><span class=\"line\">    count[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历输入数组，填充count</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">    count[arr[j]]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt;= max; k++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 按顺序将值推入输出数组，并将对应下标减1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count[k]-- &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      result.push(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"验证\">验证<a href=\"post/count-sort#验证\"></a></h2><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">countSort([<span class=\"number\">13</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">26</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">19</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">15</span>, <span class=\"number\">46</span>, <span class=\"number\">14</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 输出[13, 14, 15, 15, 19, 19, 26, 26, 27, 38, 44, 46, 47, 48, 50]</span></span><br><span class=\"line\">countSort([<span class=\"number\">43</span>,<span class=\"number\">41</span>,<span class=\"number\">15</span>,<span class=\"number\">13</span>,<span class=\"number\">48</span>,<span class=\"number\">13</span>,<span class=\"number\">74</span>,<span class=\"number\">35</span>,<span class=\"number\">12</span>,<span class=\"number\">62</span>,<span class=\"number\">15</span>,<span class=\"number\">45</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 输出 [12, 13, 13, 15, 15, 35, 41, 43, 45, 48, 62, 74]</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"总结\">总结<a href=\"post/count-sort#总结\"></a></h2><p>计数排序就是简单的桶排序，一个桶代表数组中一个数出现的个数，所以需要一个和数组数字范围一样大的辅助数组，一般用在范围小于100的排序，时间复杂度为O(n)，空间复杂度为数组的数字范围。</p>\n<h2 id=\"参考内容\">参考内容<a href=\"post/count-sort#参考内容\"></a></h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">计数排序 - 维基百科</a></li>\n<li><a href=\"https://visualgo.net/bn/sorting\" target=\"_blank\" rel=\"noopener\">排序可视化 - VisuAlgo</a></li>\n</ul>\n","prev":{"title":"堆排序解析及JavaScript实现","link":"post/heap-sort"},"next":{"title":"JS函数节流(throttle)与函数去抖(debounce)","link":"post/js-throttle-debounce"},"plink":"https://blog.zhoushuo.me/post/count-sort/","toc":[{"title":"计数算法步骤","id":"计数算法步骤","index":"1"},{"title":"流程图","id":"流程图","index":"2"},{"title":"JavaScript代码实现","id":"JavaScript代码实现","index":"3"},{"title":"验证","id":"验证","index":"4"},{"title":"总结","id":"总结","index":"5"},{"title":"参考内容","id":"参考内容","index":"6"}],"copyright":{"author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/post/count-sort/\" title=\"计数排序解析及JavaScript实现\">https://blog.zhoushuo.me/post/count-sort/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}