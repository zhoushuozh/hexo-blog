{"title":"理解JS中的闭包","date":"2018-05-19T14:51:03.000Z","slug":"js-closure","comments":true,"tags":["JavaScript"],"categories":["前端"],"updated":"2019-02-15T03:53:03.588Z","content":"<h2 id=\"什么是闭包\">什么是闭包<a href=\"post/js-closure#什么是闭包\"></a></h2><p>简单来说，闭包就是能够读取其他函数内部变量的函数。</p>\n<a id=\"more\"></a>\n<p>如果出于种种原因，需要得到函数内的局部变量。正常情况下，这是办不到的，只有通过变通方法才能实现。那就是在函数的内部，再定义一个函数。</p>\n<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p>\n<p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n=<span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = f1();</span><br><span class=\"line\">result();   <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中函数 <code>f2</code> 就是闭包，即能够读取其他函数内部变量的函数。</p>\n<h2 id=\"闭包的用途\">闭包的用途<a href=\"post/js-closure#闭包的用途\"></a></h2><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">increased</span>(<span class=\"params\">start</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start++;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inc = increased(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">inc() <span class=\"comment\">// 5</span></span><br><span class=\"line\">inc() <span class=\"comment\">// 6</span></span><br><span class=\"line\">inc() <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>start</code> 是函数 <code>incrementor</code> 的内部变量。通过闭包，<code>start</code> 的状态被保留了，每一次调用都是在上一次调用的基础上进行计算。</p>\n<p>闭包的另一个用处，是封装对象的私有属性和私有方法。</p>\n","prev":{"title":"关于cookie、session和HTTP缓存","slug":"cookie-session-http-cache"},"next":{"title":"JS中的call、apply、bind","slug":"call-apply-bind"},"link":"https://blog.zhoushuo.me/post/js-closure/","toc":[{"title":"什么是闭包","id":"什么是闭包","index":"1"},{"title":"闭包的用途","id":"闭包的用途","index":"2"}],"copyright":{"license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2018年5月19日","author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/post/js-closure/\" title=\"理解JS中的闭包\">https://blog.zhoushuo.me/post/js-closure/</a>"}}