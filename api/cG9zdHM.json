{"per_page":10,"total":2,"current":1,"data":[{"title":"element-ui的checkbox-group的问题","date":"2018-10-11T11:37:41.000Z","excerpt":"<p>说一个今天在工作中遇到的问题，element-ui中复选框组在重新赋值后无法勾选。</p>","slug":"element-checkbox","tags":["Element-ui","Vue"],"categories":["前端"]},{"title":"Vue组件间的通信","date":"2018-09-07T12:39:21.000Z","excerpt":"<p>了解过Vue的人都知道，组件化在Vue中是一个相当重要的概念，组件化一方面可以提高代码的可读性，另一方面可以少写很多的代码，利于代码的维护，而组件间的通信也是我们经常遇到的操作。组件之间通信的方式可以分为三种，父组件与子组件通信，子组与父组件通信，兄弟组件间通信。</p>","slug":"vue-component-communication","tags":["Vue"],"categories":["前端"]},{"title":"关于cookie、session和HTTP缓存","date":"2018-06-22T14:18:26.000Z","excerpt":"<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><h3 id=\"Cookie是什么\"><a href=\"#Cookie是什么\" class=\"headerlink\" title=\"Cookie是什么\"></a>Cookie是什么</h3><blockquote>\n<p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。 </p>\n</blockquote>","slug":"cookie-session-http-cache","tags":["HTTP","性能优化"],"categories":["前端"]},{"title":"理解JS中的闭包","date":"2018-05-19T06:51:03.000Z","excerpt":"<h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><p>简单来说，闭包就是能够读取其他函数内部变量的函数。</p>","slug":"js-closure","tags":["JavaScript"],"categories":["前端"]},{"title":"JS中的call、apply、bind","date":"2018-05-10T14:18:26.000Z","excerpt":"<p>在JavaScript中，call、apply和bind 是Function对象自带的三个方法，这三个方法的共同点：</p>\n<ol>\n<li>都是用来改变函数的this对象的指向的。</li>\n<li>第一个参数都是this要指向的对象。</li>\n<li>都可以利用后续参数传参。</li>\n</ol>","slug":"call-apply-bind","tags":["JavaScript"],"categories":["前端"]},{"title":"移动端Web页面适配方案","date":"2018-04-25T16:00:00.000Z","excerpt":"<p>移动端越来越被大众所接收，各个移动端设备，分辨率大小不一致，为了适应各种移动端设备，完美呈现应有的布局效果，目前也有好几种移动端适配的技术方案，今天我总结一下其中我常用的两种。</p>","slug":"mobile-web-adaptation","tags":["CSS"],"categories":["前端"]},{"title":"从输入URL到页面加载完成的过程中都发生了什么","date":"2018-04-24T16:00:00.000Z","excerpt":"<p>这是一道经典的面试题，面试官会根据你回答的内容追问下探，既考广度又考深度。关于此问题的文章网上也是一抓一大把，我写这篇博客的目的主要是从前端的角度屡一下这个过程，加深一下理解。</p>","slug":"from-url-page","tags":["HTTP"],"categories":["未分类"]},{"title":"JavaScript常见原生DOM操作API总结","date":"2018-04-05T13:38:39.000Z","excerpt":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><p>DOM全称是Document Object Model(文档对象模型)，是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。</p>\n<p>DOM 只是一个接口规范，可以用各种语言实现。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。</p>","slug":"dom-api","tags":["DOM","JavaScript"],"categories":["前端"]},{"title":"为博客添加Gitalk评论插件","date":"2018-03-21T18:32:49.000Z","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前体验过畅言、来必力、gitalk等评论插件，体验最好的就是gitalk了。我目前用的<code>icalm</code>主题内置了 <a href=\"http://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a>评论插件，用着还行，但在国内的加载速度那个惨啊… 所以决定还是换回gitalk。</p>","slug":"hexo-gitalk","tags":["Gitalk","Hexo"],"categories":["未分类"]},{"title":"博客从Firekylin迁移到Hexo","date":"2018-03-20T16:00:00.000Z","excerpt":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>之前使用的一直是Firekylin，Firekylin是由360公司Web前端工程师组成的专业团队 75Team 进行开发和维护，基于ThinkJS开发，快速很快且后台管理很方便。但是前些天突然想把博客放到二级目录，在折腾的过程中出现了一些问题，如静态资源无法加载，尝试了很多办法，最终都没不能完全解决这个问题。查了一下，<code>Firekylin</code>在设计之初没有考虑子目录，本着“生命不息，折腾不止”的精神，我决定把博客迁移到<code>Hexo</code>。</p>","slug":"firekylin-hexo","tags":["Hexo"],"categories":["未分类"]}]}