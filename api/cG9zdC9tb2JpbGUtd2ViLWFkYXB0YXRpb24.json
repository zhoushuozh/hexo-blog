{"title":"移动端Web页面适配方案","date":"2018-04-25T16:00:00.000Z","slug":"mobile-web-adaptation","comments":true,"tags":["css","mobile","rem"],"updated":"2018-04-26T18:52:48.000Z","content":"<p>移动端越来越被大众所接收，各个移动端设备，分辨率大小不一致，为了适应各种移动端设备，完美呈现应有的布局效果，目前也有好几种移动端适配的技术方案，今天我总结一下其中我常用的两种。</p>\n<a id=\"more\"></a>\n<h2 id=\"适配方式\"><a href=\"#适配方式\" class=\"headerlink\" title=\"适配方式\"></a>适配方式</h2><p>移动端适配主要有两大不同的方向：</p>\n<ul>\n<li>响应式布局：它是根据屏幕大小自动的调整布局位置（非单纯的缩放），实现适配。</li>\n<li>自适应布局：它是根据屏幕大小自动的缩放大小，实现适配。</li>\n</ul>\n<h2 id=\"媒体查询（Meida-Queries）\"><a href=\"#媒体查询（Meida-Queries）\" class=\"headerlink\" title=\"媒体查询（Meida Queries）\"></a>媒体查询（Meida Queries）</h2><p>在CSS中使用 Meida Queries：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">600px</span>) &#123; </span><br><span class=\"line\">true<span class=\"comment\">/*当屏幕尺寸小于600px时的CSS样式*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在引用css的时候加上media属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mobile.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(max-width:768px)\"</span>&gt;</span> <span class=\"comment\">&lt;!--当页面框小于768px时引用--&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>media query</code>的好处在于可以做到设备像素比的判断，方法简单，成本低，特别是对移动和PC维护同一套代码的时候。</p>\n<p>但缺点也很明显：代码量比较大，基本就是体力活，维护不方便。为了兼顾大屏幕或高清设备，会造成其他设备资源浪费，特别是加载图片资源。为了兼顾移动端和PC端各自响应式的展示效果，难免会损失各自特有的交互方式。</p>\n<h2 id=\"动态REM\"><a href=\"#动态REM\" class=\"headerlink\" title=\"动态REM\"></a>动态REM</h2><h3 id=\"什么是-rem\"><a href=\"#什么是-rem\" class=\"headerlink\" title=\"什么是 rem\"></a>什么是 rem</h3><p><code>rem</code> 单位代表根元素的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size\" target=\"_blank\" rel=\"noopener\"><code>font-size</code></a> 大小，例如 <code>&lt;html&gt;</code>元素的 <code>font-size</code>是<code>16px</code>，那么 <code>1rem</code> 就等于 <code>16px</code>。</p>\n<h3 id=\"rem-适配\"><a href=\"#rem-适配\" class=\"headerlink\" title=\"rem 适配\"></a>rem 适配</h3><p>先看下面这个例子：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;    </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;    </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10rem</span>; <span class=\"comment\">/* width=200px */</span></span><br><span class=\"line\">    height：10rem; /* height=200px */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>先给<code>html</code>设置<code>font-size</code>为<code>20px</code>，那么<code>1rem</code>就是<code>20px</code>，然后给<code>div</code>设置宽高为<code>10rem</code>，这时<code>div</code>的宽高就是<code>20px*10=200px</code>。</p>\n<p>根据根元素的<code>font-size</code>值来改变自身的值，由此我们应该可以联想到我们可以给<code>html</code>设定不同的值，从而达到我们css样式中的适配效果。</p>\n<h3 id=\"rem-值计算\"><a href=\"#rem-值计算\" class=\"headerlink\" title=\"rem 值计算\"></a>rem 值计算</h3><p>由于我们所写出的页面是要在不同的屏幕大小设备上运行的，所以我们在写样式的时候必须要先以一个确定的屏幕来作为参考，这个就由我们拿到的视觉稿来定：假如现在我们拿到的设计稿宽度是 <code>640px</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rem = <span class=\"built_in\">window</span>.innerWidth  / <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>这样计算出来的<code>rem</code>基准值就是64，这里为什么要除以10呢，是因为不想让<code>html</code>的<code>font-size</code>太大，那么不除以100呢，因为640除以100就小于12了，有些浏览器最小字体是不能小于<code>12px</code>的。这样<code>1rem</code>就等于<code>64px</code>，如果要设置一个宽度<code>320px</code>的<code>div</code>，单位换成<code>rem</code>的话就是<code>320/64 = 5rem</code>了。</p>\n<p>如果利用 rem 来设置 css 的值，一般要通过一层计算才行，这在我们写 css 中，其实算比较繁琐的一步操作了。</p>\n<p>完全可以利用<code>scss</code>来解决这个问题，例如我们可以写一个 <code>scss</code> 的 <code>function px2rem</code>即：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@function px2rem(<span class=\"variable\">$px</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable\">$rem</span> : <span class=\"number\">64px</span>;\t<span class=\"comment\">/* 设计稿宽度是640px */</span>\t</span><br><span class=\"line\">    @return (<span class=\"variable\">$px</span>/<span class=\"variable\">$rem</span>) + rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，当我们写具体数值的时候就可以写成：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">width</span>: px2rem(<span class=\"number\">320px</span>);</span><br></pre></td></tr></table></figure>\n<p>生成的<code>css</code>文件就是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>: 5<span class=\"selector-tag\">rem</span>;\t<span class=\"comment\">/* 320/64=5rem */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"动态调整-rem\"><a href=\"#动态调整-rem\" class=\"headerlink\" title=\"动态调整 rem\"></a>动态调整 rem</h3><p>接下来我就可以通过不同的屏幕去动态设置<code>html</code>的<code>font-size</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'html'</span>)[<span class=\"number\">0</span>].style.fontSize = <span class=\"built_in\">window</span>.innerWidth / <span class=\"number\">10</span> + <span class=\"string\">'px'</span>;</span><br></pre></td></tr></table></figure>\n<p>这样一来，对于设计稿上任何一个尺寸换成<code>rem</code>后，在任何屏幕分辨率下对应的尺寸占屏幕宽度的百分比相同。所以这种布局可以百分比还原设计图。如过想随着窗口大小变化自动调整，还可以绑定页面的resize事件来达到变化时更新 html 的 font-size 。</p>\n","prev":{"title":"JS中的call、apply、bind","slug":"call-apply-bind"},"next":{"title":"从输入URL到页面加载完成的过程中都发生了什么","slug":"from-url-page"},"link":"https://blog.zhoushuo.me/post/mobile-web-adaptation/","toc":[{"title":"适配方式","id":"适配方式","index":"1"},{"title":"媒体查询（Meida Queries）","id":"媒体查询（Meida-Queries）","index":"2"},{"title":"动态REM","id":"动态REM","index":"3","children":[{"title":"什么是 rem","id":"什么是-rem","index":"3.1"},{"title":"rem 适配","id":"rem-适配","index":"3.2"},{"title":"rem 值计算","id":"rem-值计算","index":"3.3"},{"title":"动态调整 rem","id":"动态调整-rem","index":"3.4"}]}],"copyright":{"author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/post/mobile-web-adaptation/\" title=\"移动端Web页面适配方案\">https://blog.zhoushuo.me/post/mobile-web-adaptation/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2018年4月26日"}}