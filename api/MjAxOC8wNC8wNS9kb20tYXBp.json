{"title":"JavaScript常见原生DOM操作API总结","date":"2018-04-05T13:38:39.000Z","link":"2018/04/05/dom-api","comments":true,"tags":["DOM","JavaScript"],"categories":["前端"],"updated":"2019-02-15T03:01:54.435Z","content":"<p>随着Vue、React等MV*框架的出现，jQuery时代提供的强大便利的操作DOM的API在前端项目里用得越来越少，数据驱动视图的模式越来越深入人心，加上DOM操作的成本非常高，操作DOM越来越不被提倡。但在一些特殊情况下，操作DOM还是避免不了的，本文就简单总结一下DOM的基本概念和一些常用的DOM操作API。</p>\n<a id=\"more\"></a>\n<h1 id=\"基本概念\">基本概念<a href=\"2018/04/05/dom-api#基本概念\"></a></h1><h2 id=\"DOM\">DOM<a href=\"2018/04/05/dom-api#DOM\"></a></h2><p>DOM全称是Document Object Model(文档对象模型)，是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。</p>\n<p>DOM 只是一个接口规范，可以用各种语言实现，例如 Python。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。</p>\n<h2 id=\"节点\">节点<a href=\"2018/04/05/dom-api#节点\"></a></h2><p>DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。</p>\n<p>几种常见的节点：</p>\n<ul>\n<li><code>Document</code>：整个文档树的顶层节点</li>\n<li><code>DocumentType</code>：<code>doctype</code>标签（比如<code>&lt;!DOCTYPE html&gt;</code>）</li>\n<li><code>Element</code>：网页的各种HTML标签（比如<code>&lt;body&gt;</code>、<code>&lt;a&gt;</code>等）</li>\n<li><code>Attribute</code>：网页元素的属性（比如<code>class=&quot;right&quot;</code>）</li>\n<li><code>Text</code>：标签之间或标签包含的文本</li>\n<li><code>Comment</code>：注释</li>\n<li><code>DocumentFragment</code>：文档的片段</li>\n</ul>\n<p>Node 对象定义了几个常量，对应这些类型值。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.nodeType === Node.DOCUMENT_NODE <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n<p>Node有一个属性<code>nodeType</code>表示Node的类型，它是一个整数，其数值分别表示相应的Node类型，不同节点的<code>nodeType</code>属性值和对应的常量如下：</p>\n<ul>\n<li>文档节点（document）：9，对应常量<code>Node.DOCUMENT_NODE</code></li>\n<li>元素节点（element）：1，对应常量<code>Node.ELEMENT_NODE</code></li>\n<li>属性节点（attr）：2，对应常量<code>Node.ATTRIBUTE_NODE</code></li>\n<li>文本节点（text）：3，对应常量<code>Node.TEXT_NODE</code></li>\n<li>文档片断节点（DocumentFragment）：11，对应常量<code>Node.DOCUMENT_FRAGMENT_NODE</code></li>\n<li>文档类型节点（DocumentType）：10，对应常量<code>Node.DOCUMENT_TYPE_NODE</code></li>\n<li>注释节点（Comment）：8，对应常量`Node.COMMENT_NODE</li>\n</ul>\n<p>上面说完了DOM的基本概念，下面将分类学习一下常用的DOM操作API。</p>\n<h1 id=\"节点查询API\">节点查询API<a href=\"2018/04/05/dom-api#节点查询API\"></a></h1><h2 id=\"document-getElementById\">document.getElementById<a href=\"2018/04/05/dom-api#document-getElementById\"></a></h2><p>根据元素id查找元素，大小写敏感，返回值是Element类型，如果不存在该元素，则返回null，如果有多个结果，只返回第一个。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'para1'</span>);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"document-getElementsByTagName\">document.getElementsByTagName<a href=\"2018/04/05/dom-api#document-getElementsByTagName\"></a></h2><p>根据标签查找元素，<code>*</code>表示查询所有标签，返回一个<code>HTMLCollection</code>。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> paras = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"document-getElementsByName\">document.getElementsByName<a href=\"2018/04/05/dom-api#document-getElementsByName\"></a></h2><p>根据元素的name属性查找，返回一个<code>NodeList</code>。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表单为 &lt;form name=\"x\"&gt;&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forms = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">'x'</span>);</span><br><span class=\"line\">forms[<span class=\"number\">0</span>].tagName <span class=\"comment\">// \"FORM\"</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"document-getElementsByClassName\">document.getElementsByClassName<a href=\"2018/04/05/dom-api#document-getElementsByClassName\"></a></h2><p>根据类名查找元素，多个类名用空格分隔，返回一个<code>HTMLCollection</code>，另外，不仅仅是document，其它元素也支持<code>getElementsByClassName</code>方法.</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elements = element.getElementsByClassName(names);</span><br></pre></td></tr></table></div></figure>\n<p>如果要获取2个以上classname，可传入多个classname，每个用空格相隔。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elements = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'foo bar'</span>);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"document-querySelector和document-querySelectorAll\">document.querySelector和document.querySelectorAll<a href=\"2018/04/05/dom-api#document-querySelector和document-querySelectorAll\"></a></h2><p>这两个api很相似，通过css选择器来查找元素，注意选择器要符合<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\" target=\"_blank\" rel=\"noopener\">CSS选择器</a>的规则。</p>\n<p>document.querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。</p>\n<p>这个例子中，会返回当前文档中第一个类名为 “<code>myclass</code>“ 的元素：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".myclass\"</span>);</span><br></pre></td></tr></table></div></figure>\n<p>document.querySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符。</p>\n<p>下面的例子返回一个文档中所有的class为”<code>note</code>“或者 “<code>alert</code>“的<code>div</code>元素.</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> matches = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"div.note, div.alert\"</span>);</span><br></pre></td></tr></table></div></figure>\n<h1 id=\"节点创建API\">节点创建API<a href=\"2018/04/05/dom-api#节点创建API\"></a></h1><h2 id=\"createElement\">createElement<a href=\"2018/04/05/dom-api#createElement\"></a></h2><p>通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br></pre></td></tr></table></div></figure>\n<p>使用<code>createElement</code>要注意：通过<code>createElement</code>创建的元素并不属于html文档，它只是创建出来，并未添加到html文档中，要调用<code>appendChild</code>或<code>insertBefore</code>等方法将其添加到HTML文档树中。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(div);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"createTextNode\">createTextNode<a href=\"2018/04/05/dom-api#createTextNode\"></a></h2><p>用来创建一个文本节点：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> node = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"我是文本节点\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(node);</span><br></pre></td></tr></table></div></figure>\n<p><code>createTextNode</code>接收一个参数，这个参数就是文本节点中的文本，和<code>createElement</code>一样，创建后的文本节点也只是独立的一个节点，同样需要<code>appendChild</code>将其添加到HTML文档树中。</p>\n<h2 id=\"cloneNode\">cloneNode<a href=\"2018/04/05/dom-api#cloneNode\"></a></h2><p>cloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否采用深度克隆，如果为<code>true</code>,则该节点的所有后代节点也都会被克隆，如果为<code>false</code>，则只克隆该节点本身。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"para1\"</span>),</span><br><span class=\"line\"><span class=\"keyword\">var</span> p_prime = p.cloneNode(<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"createDocumentFragment\">createDocumentFragment<a href=\"2018/04/05/dom-api#createDocumentFragment\"></a></h2><p>createDocumentFragment用来创建一个新的空白的文档片段。</p>\n<p><code>DocumentFragment</code>是一个存在于内存的 DOM 片段，不属于当前文档，常常用来生成一段较复杂的 DOM 结构，然后再插入当前文档。这样做的好处在于，因为<code>DocumentFragment</code>不属于当前文档，对它的任何改动，都不会引发网页的重新渲染，比直接修改当前文档的 DOM 有更好的性能表现。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> docfrag = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">  li.textContent = e;</span><br><span class=\"line\">  docfrag.appendChild(li);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> element  = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ul'</span>);</span><br><span class=\"line\">element.appendChild(docfrag);</span><br></pre></td></tr></table></div></figure>\n<p>上面代码中，文档片断<code>docfrag</code>包含四个<code>&lt;li&gt;</code>节点，这些子节点被一次性插入了当前文档。</p>\n<h1 id=\"节点修改API\">节点修改API<a href=\"2018/04/05/dom-api#节点修改API\"></a></h1><h2 id=\"appendChild\">appendChild<a href=\"2018/04/05/dom-api#appendChild\"></a></h2><p>appendChild我们在前面已经用到多次，接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点。该方法的返回值就是插入文档的子节点。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(p);</span><br></pre></td></tr></table></div></figure>\n<p>如果参数节点是 DOM 已经存在的节点，<code>appendChild</code>方法会将其从原来的位置，移动到新位置。</p>\n<p>如果<code>appendChild</code>方法的参数是<code>DocumentFragment</code>节点，那么插入的是<code>DocumentFragment</code>的所有子节点，而不是<code>DocumentFragment</code>节点本身。返回值是一个空的<code>DocumentFragment</code><strong>节点</strong>。</p>\n<h2 id=\"insertBefore\">insertBefore<a href=\"2018/04/05/dom-api#insertBefore\"></a></h2><p><code>insertBefore</code>方法用于将某个节点插入父节点内部的指定位置。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> insertedNode = parentNode.insertBefore(newNode, referenceNode);</span><br></pre></td></tr></table></div></figure>\n<p><code>insertBefore</code>接受两个参数，第一个参数是所要插入的节点<code>newNode</code>，第二个参数是父节点<code>parentNode</code>内部的一个子节点<code>referenceNode</code>。<code>newNode</code>将插在<code>referenceNode</code>这个子节点的前面。返回值是插入的新节点<code>newNode</code>。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.insertBefore(p, <span class=\"built_in\">document</span>.body.firstChild);</span><br></pre></td></tr></table></div></figure>\n<p>上面代码中，新建一个<code>&lt;p&gt;</code>节点，插在<code>document.body.firstChild</code>的前面，也就是成为<code>document.body</code>的第一个子节点。</p>\n<p>关于第二个参数参照节点还有两个注意的地方：</p>\n<ol>\n<li>refNode是必传的，如果不传该参数会报错</li>\n<li>如果refNode是undefined或null，则insertBefore会将节点添加到子元素的末尾</li>\n</ol>\n<h2 id=\"removeChild\">removeChild<a href=\"2018/04/05/dom-api#removeChild\"></a></h2><p>removeChild顾名思义，就是从当前节点移除该子节点。返回值是移除的子节点。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> deletedChild = parent.removeChild(node);</span><br></pre></td></tr></table></div></figure>\n<p>被移除的节点依然存在于内存之中，但不再是 DOM 的一部分。所以，一个节点移除以后，依然可以使用它，比如插入到另一个节点下面。</p>\n<p>如果被删除的节点不是其子节点，<code>removeChild</code>方法将报错。</p>\n<h2 id=\"replaceChild\">replaceChild<a href=\"2018/04/05/dom-api#replaceChild\"></a></h2><p><code>replaceChild</code>方法用于将一个新的节点，替换当前节点的某一个子节点。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> replacedNode = parentNode.replaceChild(newChild, oldChild);</span><br></pre></td></tr></table></div></figure>\n<p>上面代码中，<code>replaceChild</code>方法接受两个参数，第一个参数<code>newChild</code>是用来替换的新节点，第二个参数<code>oldChild</code>是将要替换走的子节点。返回值是替换走的那个节点<code>oldChild</code>。</p>\n<h1 id=\"节点关系API\">节点关系API<a href=\"2018/04/05/dom-api#节点关系API\"></a></h1><h2 id=\"节点树\">节点树<a href=\"2018/04/05/dom-api#节点树\"></a></h2><p>一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 DOM 树。它有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，就这样层层衍生出一个金字塔结构，倒过来就像一棵树。</p>\n<p>浏览器原生提供<code>document</code>节点，代表整个文档。</p>\n<p>文档的第一层只有一个节点，就是 HTML 网页的第一个标签<code>&lt;html&gt;</code>，它构成了树结构的根节点（root node），其他 HTML 标签节点都是它的下级节点。</p>\n<p>除了根节点，其他节点都有三种层级关系。</p>\n<ul>\n<li>父节点关系（parentNode）：直接的那个上级节点</li>\n<li>子节点关系（childNodes）：直接的下级节点</li>\n<li>同级节点关系（sibling）：拥有同一个父节点的节点</li>\n</ul>\n<p>DOM 提供操作接口，用来获取这三种关系的节点。</p>\n<h2 id=\"父关系API\">父关系API<a href=\"2018/04/05/dom-api#父关系API\"></a></h2><ul>\n<li><code>parentNode</code>：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment。</li>\n<li><code>parentElement</code>：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element元素，如果不是，则返回null；</li>\n</ul>\n<h2 id=\"子关系API\">子关系API<a href=\"2018/04/05/dom-api#子关系API\"></a></h2><ul>\n<li><code>children</code>：返回一个实时的<code>HTMLCollection</code>，子节点都是Element，IE9以下浏览器不支持；</li>\n<li><code>childNodes</code>：返回一个实时的<code>NodeList</code>，表示元素的子节点列表，注意子节点可能包含文本节点、注释节点等；</li>\n<li><code>firstChild</code>：返回第一个子节点，不存在返回null，与之相对应的还有一个<code>firstElementChild</code>；</li>\n<li><code>lastChild</code>：返回最后一个子节点，不存在返回null，与之相对应的还有一个<code>lastElementChild</code>；</li>\n</ul>\n<h2 id=\"兄弟关系型API\">兄弟关系型API<a href=\"2018/04/05/dom-api#兄弟关系型API\"></a></h2><ul>\n<li><code>previousSibling</code>：节点的前一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。</li>\n<li><code>nextSibling</code>：节点的后一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。</li>\n<li><code>previousElementSibling</code>：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。</li>\n<li><code>nextElementSibling</code>：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</li>\n</ul>\n<h1 id=\"元素属性API\">元素属性API<a href=\"2018/04/05/dom-api#元素属性API\"></a></h1><h2 id=\"getAttribute\">getAttribute<a href=\"2018/04/05/dom-api#getAttribute\"></a></h2><p><code>Element.getAttribute</code>方法接受一个字符串作为参数，返回同名属性的值。如果没有该属性，则返回<code>null</code>。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mydiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mydiv'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = mydiv.getAttribute(<span class=\"string\">'id'</span>);</span><br></pre></td></tr></table></div></figure>\n<p>上面代码读取<code>mydiv</code>的<code>id</code>的值。</p>\n<h2 id=\"setAttribute\">setAttribute<a href=\"2018/04/05/dom-api#setAttribute\"></a></h2><p><code>Element.setAttribute</code>方法用于为当前节点设置属性。如果属性已经存在，将更新属性值，否则将添加该属性。该方法没有返回值。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">b.setAttribute(<span class=\"string\">'name'</span>, <span class=\"string\">'myButton'</span>);</span><br><span class=\"line\">b.setAttribute(<span class=\"string\">'disabled'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></div></figure>\n<p>上面代码中，<code>button</code>元素的<code>name</code>属性被设成<code>myButton</code>，<code>disabled</code>属性被设成<code>true</code>。</p>\n<p>这里有两个地方需要注意，首先，属性值总是字符串，其他类型的值会自动转成字符串，比如布尔值<code>true</code>就会变成字符串<code>true</code>；其次，上例的<code>disable</code>属性是一个布尔属性，对于<code>&lt;button&gt;</code>元素来说，这个属性不需要属性值，只要设置了就总是会生效，因此<code>setAttribute</code>方法里面可以将<code>disabled</code>属性设成任意值。</p>\n<h2 id=\"removeAttribute\">removeAttribute<a href=\"2018/04/05/dom-api#removeAttribute\"></a></h2><p><code>Element.removeAttribute</code>方法移除指定属性。该方法没有返回值。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).removeAttribute(<span class=\"string\">'id'</span>)</span><br></pre></td></tr></table></div></figure>\n<h1 id=\"元素样式API\">元素样式API<a href=\"2018/04/05/dom-api#元素样式API\"></a></h1><h2 id=\"直接修改元素的样式\">直接修改元素的样式<a href=\"2018/04/05/dom-api#直接修改元素的样式\"></a></h2><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.style.color = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">elem.style.setProperty(<span class=\"string\">'font-size'</span>, <span class=\"string\">'16px'</span>);</span><br><span class=\"line\">elem.style.removeProperty(<span class=\"string\">'color'</span>);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"window-getComputedStyle\">window.getComputedStyle<a href=\"2018/04/05/dom-api#window-getComputedStyle\"></a></h2><p><code>window.getComputedStyle</code>方法，就用来返回浏览器计算后得到的最终规则。它接受一个节点对象作为参数，返回一个 CSSStyleDeclaration 实例，包含了指定节点的最终样式信息。所谓“最终样式信息”，指的是各种 CSS 规则叠加后的结果。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> styleObj = <span class=\"built_in\">window</span>.getComputedStyle(div);</span><br><span class=\"line\">styleObj.backgroundColor</span><br></pre></td></tr></table></div></figure>\n<p>上面代码中，得到的背景色就是<code>div</code>元素真正的背景色。</p>\n<h2 id=\"getBoundingClientRect\">getBoundingClientRect<a href=\"2018/04/05/dom-api#getBoundingClientRect\"></a></h2><p><code>getBoundingClientRect</code>用来返回元素的大小以及相对于浏览器可视窗口的位置，用法如下：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> clientRect = element.getBoundingClientRect();</span><br></pre></td></tr></table></div></figure>\n<p>clientRect是一个<code>DOMRect</code>对象，包含width、height、left、top、right、bottom，它是相对于窗口顶部而不是文档顶部，滚动页面时它们的值是会发生变化的。</p>\n<h1 id=\"参考内容\">参考内容<a href=\"2018/04/05/dom-api#参考内容\"></a></h1><ul>\n<li><a href=\"http://javascript.ruanyifeng.com/dom/node.html\" target=\"_blank\" rel=\"noopener\">DOM模型 - 阮一峰JavaScript</a></li>\n<li><a href=\"http://luopq.com/2015/11/30/javascript-dom/\" target=\"_blank\" rel=\"noopener\">狼狼的蓝胖子</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model#HTML_%E6%8E%A5%E5%8F%A3\" target=\"_blank\" rel=\"noopener\">文档对象模型(DOM) - MDN</a></li>\n</ul>\n","prev":{"title":"从输入URL到页面加载完成的过程中都发生了什么","link":"2018/04/25/from-url-page"},"next":{"title":"为博客添加Gitalk评论插件","link":"2018/03/22/hexo-gitalk"},"plink":"https://blog.zhoushuo.me/2018/04/05/dom-api/","toc":[{"title":"基本概念","id":"基本概念","index":"1","children":[{"title":"DOM","id":"DOM","index":"1.1"},{"title":"节点","id":"节点","index":"1.2"}]},{"title":"节点查询API","id":"节点查询API","index":"2","children":[{"title":"document.getElementById","id":"document-getElementById","index":"2.1"},{"title":"document.getElementsByTagName","id":"document-getElementsByTagName","index":"2.2"},{"title":"document.getElementsByName","id":"document-getElementsByName","index":"2.3"},{"title":"document.getElementsByClassName","id":"document-getElementsByClassName","index":"2.4"},{"title":"document.querySelector和document.querySelectorAll","id":"document-querySelector和document-querySelectorAll","index":"2.5"}]},{"title":"节点创建API","id":"节点创建API","index":"3","children":[{"title":"createElement","id":"createElement","index":"3.1"},{"title":"createTextNode","id":"createTextNode","index":"3.2"},{"title":"cloneNode","id":"cloneNode","index":"3.3"},{"title":"createDocumentFragment","id":"createDocumentFragment","index":"3.4"}]},{"title":"节点修改API","id":"节点修改API","index":"4","children":[{"title":"appendChild","id":"appendChild","index":"4.1"},{"title":"insertBefore","id":"insertBefore","index":"4.2"},{"title":"removeChild","id":"removeChild","index":"4.3"},{"title":"replaceChild","id":"replaceChild","index":"4.4"}]},{"title":"节点关系API","id":"节点关系API","index":"5","children":[{"title":"节点树","id":"节点树","index":"5.1"},{"title":"父关系API","id":"父关系API","index":"5.2"},{"title":"子关系API","id":"子关系API","index":"5.3"},{"title":"兄弟关系型API","id":"兄弟关系型API","index":"5.4"}]},{"title":"元素属性API","id":"元素属性API","index":"6","children":[{"title":"getAttribute","id":"getAttribute","index":"6.1"},{"title":"setAttribute","id":"setAttribute","index":"6.2"},{"title":"removeAttribute","id":"removeAttribute","index":"6.3"}]},{"title":"元素样式API","id":"元素样式API","index":"7","children":[{"title":"直接修改元素的样式","id":"直接修改元素的样式","index":"7.1"},{"title":"window.getComputedStyle","id":"window-getComputedStyle","index":"7.2"},{"title":"getBoundingClientRect","id":"getBoundingClientRect","index":"7.3"}]},{"title":"参考内容","id":"参考内容","index":"8"}],"copyright":{"author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/2018/04/05/dom-api/\" title=\"JavaScript常见原生DOM操作API总结\">https://blog.zhoushuo.me/2018/04/05/dom-api/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}