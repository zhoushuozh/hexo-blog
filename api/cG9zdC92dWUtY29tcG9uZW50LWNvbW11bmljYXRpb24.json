{"title":"Vue组件间的通信","date":"2018-09-07T12:39:21.000Z","link":"post/vue-component-communication","comments":true,"tags":["Vue"],"categories":["前端"],"updated":"2019-02-15T03:50:56.163Z","content":"<p>了解过Vue的人都知道，组件化在Vue中是一个相当重要的概念，组件化一方面可以提高代码的可读性，另一方面可以少写很多的代码，利于代码的维护，而组件间的通信也是我们经常遇到的操作。组件之间通信的方式可以分为三种，父组件与子组件通信，子组与父组件通信，兄弟组件间通信。</p>\n<a id=\"more\"></a>\n<h2 id=\"父组件与子组件通信\">父组件与子组件通信<a href=\"post/vue-component-communication#父组件与子组件通信\"></a></h2><p>在Vue中，父子组件的关系可以总结为向下通过 prop 传递，向上通过事件传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。 </p>\n<p>一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。我们能够在组件实例中访问这个值，就像访问 <code>data</code> 中的值一样。 </p>\n<p>父组件：</p>\n<figure class=\"highlight javascript\"><figcaption><span>parent.vue</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;child :mgs=<span class=\"string\">\"message\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        message: 'hello world!',</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>子组件：</p>\n<figure class=\"highlight javascript\"><figcaption><span>child.vue</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['mgs']</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"子组件与父组件通信\">子组件与父组件通信<a href=\"post/vue-component-communication#子组件与父组件通信\"></a></h2><p>父组件与子组件通信，我们可以调用vue内建的<code>$emit</code>并传入事件的名字，来向父级组件触发一个事件，然后在父组件上监听这个事件。</p>\n<p>子组件：</p>\n<figure class=\"highlight javascript\"><figcaption><span>child2.vue</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div @click=<span class=\"string\">\"tellParent\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['mgs2'],</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    tellParent() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$emit('listenChild2', 'hello world!');</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>父组件：</p>\n<figure class=\"highlight javascript\"><figcaption><span>parent2.vue</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;child :mgs2=<span class=\"string\">\"message2\"</span> @listenChild2=<span class=\"string\">\"updateMgs2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        message2: 'hi!'</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    updateMgs2(val)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.message2 = val</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>在父组件中绑定一个<code>listenChild2</code>的事件，然后给这个事件添加<code>updateMgs2</code>方法，当子组件child2通过点击事件<code>tellParent</code>触发<code>listenChild2</code>的时候，父组件里面的<code>updateMgs2</code>方法就会执行，并且数据通过参数的形式传递给父组件，从而实现通信的功能。 </p>\n<p>此外，在父组件中也可以使用 <a href=\"https://cn.vuejs.org/v2/api/index.html#vm-children\" target=\"_blank\" rel=\"noopener\">$children</a> 可以访问子组件，子组件也可以通过 <a href=\"https://cn.vuejs.org/v2/api/index.html#vm-parent\" target=\"_blank\" rel=\"noopener\">$parent</a> 访问父组件中的数据。 </p>\n<h2 id=\"兄弟组件间通信\">兄弟组件间通信<a href=\"post/vue-component-communication#兄弟组件间通信\"></a></h2><p>首先我先举个例子吗，便于我们理解：如果你想把你支付宝里的钱转到微信你会怎么做？我想大部分人都知道：现将支付宝里的钱提现到银行卡，然后将银行卡里的钱充值到微信里面</p>\n<p>所以你可能也猜到了，对于同级间组件进行通信处理的方法是，新建一个Vue实例作为事件总线，然后通过这个Vue实例来监听和触发事件。具体实现如下：</p>\n<ol>\n<li><p>在需要进行通信的同级组件引入<code>event.js</code> 。</p>\n<figure class=\"highlight javascript\"><figcaption><span>event.js</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> _bus = <span class=\"keyword\">new</span> Vue();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> _bus;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>在兄弟组件A中使用<code>$emit</code>触发事件。</p>\n<p>组件A:</p>\n<figure class=\"highlight javascript\"><figcaption><span>componentA.vue</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div @click=<span class=\"string\">\"tellCompB\"</span>&gt;点击向组件B通信&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> _bus <span class=\"keyword\">from</span> <span class=\"string\">'event.js'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'mgs'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    tellCompB() &#123;</span><br><span class=\"line\">      _bus.$emit(<span class=\"string\">'listenCompA'</span>, <span class=\"string\">'from component A'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>在兄弟组件B中使用<code>$on</code>监听事件。</p>\n<p>组件B:</p>\n<figure class=\"highlight javascript\"><figcaption><span>componentB.vue</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"component-B\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import _bus from 'event.js'</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        message: 'hi!'</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    _bus.$on('listenCompA', data =&gt; this.message = data)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n<p>当组件A<code>componentA</code>触发<code>listenCompA</code>时，组件B<code>componentB</code>中的监听事件<code>listenCompA</code>就会被触发，数据通过参数的形式传入，从而实现同级组件间通信。 </p>\n<h2 id=\"其他\">其他<a href=\"post/vue-component-communication#其他\"></a></h2><h3 id=\"父组件通过-refs操作子组件\">父组件通过<code>$refs</code>操作子组件<a href=\"post/vue-component-communication#父组件通过-refs操作子组件\"></a></h3><p>在Vue中，在父组件里可以通过<code>ref</code>属性拿到子组件，从而可以调用子组件的方法。</p>\n<p>父组件：</p>\n<figure class=\"highlight html\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>然后父组件就可以通过<code>$refs</code>访问子组件的属性和方法了。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$refs.child1.child1Function</span><br></pre></td></tr></table></div></figure>\n<p>注意：<code>ref</code>属性的命名不能用驼峰。</p>\n<h3 id=\"Vuex\">Vuex<a href=\"post/vue-component-communication#Vuex\"></a></h3><p>对于一些简单的组件间的通信其实这些方式足够用了，如果一个页面涉及到很多的组件，那么这种方法就不是那么简洁了，这是就需要用到Vue中很重要的一个插件了<code>Vuex</code>。</p>\n<blockquote>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">devtools extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p>\n</blockquote>\n<p>大家如果有兴趣的话可以去了解一下：<a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener\">What is Vuex?</a></p>\n","prev":{"title":"vue更新数据后视图没有刷新的问题","link":"post/vue-model-view"},"next":{"title":"关于cookie、session和HTTP缓存","link":"post/cookie-session-http-cache"},"plink":"https://blog.zhoushuo.me/post/vue-component-communication/","toc":[{"title":"父组件与子组件通信","id":"父组件与子组件通信","index":"1"},{"title":"子组件与父组件通信","id":"子组件与父组件通信","index":"2"},{"title":"兄弟组件间通信","id":"兄弟组件间通信","index":"3"},{"title":"其他","id":"其他","index":"4","children":[{"title":"父组件通过<code>$refs</code>操作子组件","id":"父组件通过-refs操作子组件","index":"4.1"},{"title":"Vuex","id":"Vuex","index":"4.2"}]}],"copyright":{"author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/post/vue-component-communication/\" title=\"Vue组件间的通信\">https://blog.zhoushuo.me/post/vue-component-communication/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}