{"title":"JS函数节流(throttle)与函数去抖(debounce)","date":"2018-01-18T13:23:43.000Z","link":"2018/01/18/js-throttle-debounce","comments":true,"tags":["JavaScript","性能优化"],"categories":["前端"],"updated":"2019-02-15T03:23:31.135Z","content":"<p>在浏览器 DOM 事件里面，有一些事件会随着用户的操作不间断触发。如：改变窗口大小（resize）、鼠标滚动（scroll）、鼠标移动（mousemove），如果把逻辑函数直接绑定到这些事件上，会严重影响性能，再比如把ajax请求直接绑定到keydown事件上，将在用户输入时产生频率很高的ajax请求，给服务器造成不必要的响应压力。</p>\n<a id=\"more\"></a>\n<h2 id=\"函数节流-throttle\">函数节流 (throttle)<a href=\"2018/01/18/js-throttle-debounce#函数节流-throttle\"></a></h2><p>每间隔某个时间去执行某函数，避免函数的过多执行，这个方式就叫函数节流。即设定一个时间间隔，当时间间隔大于或等于时，立即执行一次方法。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, delta, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> safe = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(safe) &#123;</span><br><span class=\"line\">            fn.call(context, args)</span><br><span class=\"line\">            safe = <span class=\"literal\">false</span></span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                safe = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;, delta)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"函数防抖-debounce\">函数防抖 (debounce)<a href=\"2018/01/18/js-throttle-debounce#函数防抖-debounce\"></a></h2><p>固定的时间间隔内，如果事件再次被触发，则重置时间，直到大于等于时间间隔才执行方法。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delta, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeoutID = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeoutID) &#123;</span><br><span class=\"line\">        clearTimeout(timeoutID);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    timeoutID = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            fn.apply(context, args);</span><br><span class=\"line\">        &#125;, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"区别\">区别<a href=\"2018/01/18/js-throttle-debounce#区别\"></a></h2><p>throttle：一辆定时的地铁，每五分钟出发一辆，不管你有没有上到车，只要命令下来过五分钟之后就出发。</p>\n<p>debounce：就跟电梯的原理一样，只要10s之内有人来就重置时间，再过10s，直到大于等于10s之后没人进来才出发。</p>\n<h2 id=\"小结\">小结<a href=\"2018/01/18/js-throttle-debounce#小结\"></a></h2><p>函数节流(throttle)和函数防抖(debounce)都是通过延时逻辑操作来提升性能的方法，在前端优化中是常见且重要的解决方式。可以从概念和实际应用中理解两者的区别，在需要的时候选择合适的方法处理。</p>\n","prev":{"title":"计数排序解析及JavaScript实现","link":"2018/02/26/count-sort"},"next":{"title":"CSS多行文本溢出省略显示","link":"2017/10/13/text-overflow"},"plink":"https://blog.zhoushuo.me/2018/01/18/js-throttle-debounce/","toc":[{"title":"函数节流 (throttle)","id":"函数节流-throttle","index":"1"},{"title":"函数防抖 (debounce)","id":"函数防抖-debounce","index":"2"},{"title":"区别","id":"区别","index":"3"},{"title":"小结","id":"小结","index":"4"}],"copyright":{"author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/2018/01/18/js-throttle-debounce/\" title=\"JS函数节流(throttle)与函数去抖(debounce)\">https://blog.zhoushuo.me/2018/01/18/js-throttle-debounce/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}