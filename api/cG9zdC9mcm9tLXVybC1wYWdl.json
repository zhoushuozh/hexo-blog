{"title":"从输入URL到页面加载完成的过程中都发生了什么","date":"2018-04-25T00:00:00.000Z","slug":"from-url-page","comments":true,"tags":["HTTP"],"categories":["未分类"],"updated":"2019-02-15T03:12:40.682Z","content":"<p>这是一道经典的面试题，面试官会根据你回答的内容追问下探，既考广度又考深度。关于此问题的文章网上也是一抓一大把，我写这篇博客的目的主要是从前端的角度屡一下这个过程，加深一下理解。</p>\n<a id=\"more\"></a>\n<p><strong>大概流程是这样的：</strong></p>\n<ol>\n<li>DNS解析</li>\n<li>TCP连接</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求并返回HTTP报文</li>\n<li>浏览器解析渲染页面</li>\n<li>连接结束</li>\n</ol>\n<h2 id=\"1-查找-IP-地址\">1. 查找 IP 地址<a href=\"post/from-url-page#1-查找-IP-地址\"></a></h2><p>每个域名都对应一个或多个提供相同服务服务器的 IP 地址，只有知道服务器 IP 地址才能建立连接，所以需要通过 DNS 把域名解析成一个 IP 地址。</p>\n<p>浏览器会根据浏览器缓存-&gt;系统缓存(host)-&gt;路由器缓存-&gt;DNS服务器，逐级递归向上找,找到该域名对应的IP地址。</p>\n<p>DNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来；至此，浏览器已经得到了域名对应的 IP 地址。</p>\n<p><strong>补充：</strong></p>\n<ul>\n<li>域名与 URL 是两个概念：域名是一台或一组服务器的名称，用来确定服务器在 Internet 上的位置；URL 是统一资源定位符，用来确定某一个文件的具体位置，</li>\n<li>IP 地址与域名不是一一对应的关系：可以把多个提供相同服务的服务器 IP 设置为同一个域名，但在同一时刻一个域名只能解析出一个 IP地址；同时，一个 IP 地址可以绑定多个域名，数量不限。</li>\n</ul>\n<h2 id=\"2-建立TCP连接\">2. 建立TCP连接<a href=\"post/from-url-page#2-建立TCP连接\"></a></h2><p>得到服务器 IP 地址止后，浏览器在传输层发起一条到达服务器的 TCP 连接，建立 TCP 三次握手。</p>\n<p>第一次握手：建立连接时,客户端发送syn包(syn=j)到服务器,并进入SYN_SEND状态,等待服务器确认；<br>SYN：同步序列编号(Synchronize Sequence Numbers)</p>\n<p>第二次握手：服务器收到syn包,必须确认客户的SYN（ack=j+1）,同时自己也发送一个SYN包（syn=k）,即SYN+ACK包,此时服务器进入SYN_RECV状态；</p>\n<p>第三次握手：客户端收到服务器的SYN＋ACK包,向服务器发送确认包ACK(ack=k+1),此包发送完毕,客户端和服务器进入ESTABLISHED状态,完成三次握手。</p>\n<p>通过这样的三次握手，客户端与服务端建立起可靠的双工的连接，开始传送数据。</p>\n<p>为保证信息传输的可靠性，三次握手过程中，若一方收不到确认信号，协议会要求重新发送信号。</p>\n<h2 id=\"3-HTTP发起请求\">3. HTTP发起请求<a href=\"post/from-url-page#3-HTTP发起请求\"></a></h2><p>HTTP 请求报文由四部分组成：请求行、请求头、空行、消息体。</p>\n<div class=\"article-img\"><p><img src=\"https://cdn.zhoushuo.me/request-headers.jpg\" alt=\"chrome-request-headers\" data-zoomable=\"\"></p></div>\n<p>一个典型的 http request header 一般需要包括请求的方法，例如 GET 或者 POST 等，不常用的还有 PUT 和 DELETE 方法，更加不常用的还有 HEAD 和 OPTION 以及 TRACE 方法，一般的浏览器只能发起 GET 或者 POST 请求。</p>\n<h2 id=\"4-服务器处理请求\">4. 服务器处理请求<a href=\"post/from-url-page#4-服务器处理请求\"></a></h2><p>服务器在收到浏览器发送的 HTTP 请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以 HTTP 的 Response 对象返回，主要包括状态码，响应头，响应报文三个部分。</p>\n<p><strong>HTTP状态码共分为5种类型：</strong></p>\n<p>1**  信息，服务器收到请求，需要请求者继续执行操作</p>\n<p>2**  成功，操作被成功接收并处理</p>\n<p>3**  重定向，需要进一步的操作以完成请求</p>\n<p>4**  客户端错误，请求包含语法错误或无法完成请求</p>\n<p>5**  服务器错误，服务器在处理请求的过程中发生了错误</p>\n<p><strong>以下最常见的几种 HTTP 状态码：</strong></p>\n<ul>\n<li>200 - 请求成功</li>\n<li>301 - 资源（网页等）被永久转移到其它URL</li>\n<li>404 - 请求的资源（网页等）不存在</li>\n<li>500 - 内部服务器错误</li>\n</ul>\n<h2 id=\"5-页面渲染\">5. 页面渲染<a href=\"post/from-url-page#5-页面渲染\"></a></h2><p>当浏览器接收到报文，根据收到的资源的类型，进行语法解析，解析相应的内部数据结构，然后将资源组织成屏幕上显示的图像，这个过程叫渲染。网页渲染是浏览器最复杂、最核心的功能。</p>\n<div class=\"article-img\"><p><img src=\"https://cdn.zhoushuo.me/dom-render.jpg\" alt=\"render\" data-zoomable=\"\"></p></div>\n<p>浏览器会解析三个东西： </p>\n<ul>\n<li><p>HTML/SVG/XHTML，解析这三种文件会产生一个 DOM Tree。 </p>\n</li>\n<li><p>CSS，解析 CSS 会产生 CSS 规则树。 </p>\n</li>\n<li><p>Javascript脚本，主要是通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree.</p>\n</li>\n</ul>\n<p>解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree，可以理解为“画”元素。</p>\n<p><strong>补充：</strong></p>\n<p>构建 DOM Tree 的过程中，如果遇到了由 <code>&lt;script&gt;</code> 标签包起来的 js 动态脚本代码，那么会把代码送到 js 引擎里面去跑，如果遇到了 <code>&lt;style&gt;</code>标签包围起来的 css 代码，也会保存下来，用于稍后的渲染。如果遇到了 img 等引用外部文件的标签，那么浏览器会根据指定的 url 再次发起一个新的 HTTP 请求，去把这个文件拉取回来。</p>\n<h2 id=\"6-关闭TCP连接\">6. 关闭TCP连接<a href=\"post/from-url-page#6-关闭TCP连接\"></a></h2><p><strong>通过四次挥手关闭连接：</strong></p>\n<p>第一次挥手：浏览器发完数据后，发送 FIN 请求断开连接。</p>\n<p>第二次挥手：服务器收到这个FIN，发回一个 ACK 表示同意。</p>\n<p>第三次挥手：服务器关闭浏览器的连接，发送一个 FIN 给浏览器。</p>\n<p>第四次挥手：浏览器发回 ACK 报文确认。</p>\n<p><strong>补充：</strong></p>\n<p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p>\n<p>至此，整个流程基本就完成了，当然，以上只是一些很简单的介绍，还有很多复杂的细节没有提到，有时间我还会继续补充完善。</p>\n<h2 id=\"参考内容\">参考内容<a href=\"post/from-url-page#参考内容\"></a></h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/23155051\" target=\"_blank\" rel=\"noopener\">从输入 URL 到页面加载完成的过程中都发生了什么</a></li>\n<li><a href=\"https://blog.csdn.net/zixiaomuwu/article/details/60965466\" target=\"_blank\" rel=\"noopener\">简明理解三次握手和四次挥手</a></li>\n<li><a href=\"https://zrj.me/archives/593\" target=\"_blank\" rel=\"noopener\">从点击到呈现 — 详解一次HTTP请求</a></li>\n<li><a href=\"https://blog.csdn.net/XIAOZHUXMEN/article/details/52014901\" target=\"_blank\" rel=\"noopener\">浏览器加载、解析、渲染的过程</a></li>\n</ul>\n","prev":{"title":"移动端Web页面适配方案","slug":"mobile-web-adaptation"},"next":{"title":"JavaScript常见原生DOM操作API总结","slug":"dom-api"},"link":"https://blog.zhoushuo.me/post/from-url-page/","toc":[{"title":"1. 查找 IP 地址","id":"1-查找-IP-地址","index":"1"},{"title":"2. 建立TCP连接","id":"2-建立TCP连接","index":"2"},{"title":"3. HTTP发起请求","id":"3-HTTP发起请求","index":"3"},{"title":"4. 服务器处理请求","id":"4-服务器处理请求","index":"4"},{"title":"5. 页面渲染","id":"5-页面渲染","index":"5"},{"title":"6. 关闭TCP连接","id":"6-关闭TCP连接","index":"6"},{"title":"参考内容","id":"参考内容","index":"7"}],"copyright":{"license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2018年4月25日","author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/post/from-url-page/\" title=\"从输入URL到页面加载完成的过程中都发生了什么\">https://blog.zhoushuo.me/post/from-url-page/</a>"}}