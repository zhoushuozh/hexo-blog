{"title":"HTML5 Canvas 基础","date":"2018-03-05T15:21:54.000Z","link":"post/html5-canvas","comments":true,"tags":["Canvas","HTML5"],"categories":["前端"],"updated":"2019-02-15T03:22:24.755Z","content":"<p><code>&lt;canvas&gt;</code> 是HTML5新增的元素，可以用于绘制图形，制作照片，创建动画。<code>&lt;canvas&gt;</code> 标签只是图形容器，它没有自己的行为，必须使用脚本来绘制图形。</p>\n<a id=\"more\"></a>\n<h2 id=\"创建一个canvas\">创建一个canvas<a href=\"post/html5-canvas#创建一个canvas\"></a></h2><figure class=\"highlight html\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mycanvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><code>&lt;canvas&gt;</code>标签只有两个属性—— <code>width</code>和<code>height</code>，当没有设置宽度和高度的时候，<code>&lt;canvas&gt;</code> 的默认大小为300px×150px。需要注意的是，如果使用<code>css</code>来定义<code>&lt;canvas&gt;</code>的大小，在绘制时图像会伸缩以适应它的框架尺寸：如果CSS的尺寸与初始画布的比例不一致，它会出现扭曲。</p>\n<h2 id=\"渲染上下文\">渲染上下文<a href=\"post/html5-canvas#渲染上下文\"></a></h2><p><code>&lt;canvas&gt;</code>元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成。</p>\n<p><code>&lt;canvas&gt;</code>创造了一个固定大小的画布，它公开了一个或多个渲染上下文，其可以用来绘制和处理要展示的内容。</p>\n<p>canvas起初是空白的，首先需要找到渲染上下文，然后在它的上面绘制。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mycanvas\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br></pre></td></tr></table></div></figure>\n<p><code>&lt;canvas&gt;</code>有一个叫做 <code>getContext()</code>的方法，这个方法是用来获得渲染上下文和它的绘画功能。<code>getContext()</code>只有一个参数，就是上下文的格式。</p>\n<h2 id=\"检查浏览器兼容性\">检查浏览器兼容性<a href=\"post/html5-canvas#检查浏览器兼容性\"></a></h2><p>最新版的 FireFox，Safari，Chrome 和 Opera 都支持 HTML5 <code>canvas</code>，但是 IE8及以下都不支持<code>canvas</code>。下面的代码用于检测浏览器的是否支持<code>canvas</code>。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mycanvas'</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (canvas.getContext)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// drawing code here</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// canvas-unsupported code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"canvas-坐标\">canvas 坐标<a href=\"post/html5-canvas#canvas-坐标\"></a></h2><p>在绘制图形之前，我们还应该先了解一下<code>canvas</code>中的坐标。<code>canvas</code>默认被网格所覆盖。通常来说网格中的一个单元相当于<code>canvas</code>元素中的一像素。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点定位。</p>\n<h2 id=\"绘制-canvas-图形\">绘制 canvas 图形<a href=\"post/html5-canvas#绘制-canvas-图形\"></a></h2><p>好的，接下来我们就开始了解怎么使用Canvas的API绘制基本图形了 。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mycanvas'</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (canvas.getContext)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">    ctx.fillStyle=<span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>上面的两行代码绘制一个红色的矩形：</p>\n<p>设置<code>fillStyle</code>属性可以是<code>css</code>颜色，渐变，或图案。<code>fillStyle</code>默认设置是<code>#000000</code>（黑色）。</p>\n<p><code>fillRect(x,y,width,height)</code>方法定义了矩形当前的填充方式，<code>x</code>与<code>y</code>指定了在<code>canvas</code>画布上所绘制的矩形的左上角（相对于原点）的坐标。<code>width</code>和<code>height</code>设置矩形的尺寸。</p>\n<h2 id=\"canvas-路径\">canvas 路径<a href=\"post/html5-canvas#canvas-路径\"></a></h2><p>路径是通过线段或曲线相连形成的不同形状的点的集合。一个路径，甚至一个子路径，都是闭合的。使用路径绘制图形需要一些额外的步骤。<br>以下是所要用到的方法：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>strokeStyle</code></td>\n<td>用于设置画笔绘制路径的颜色、渐变和模式 </td>\n</tr>\n<tr>\n<td><code>lineWidth</code></td>\n<td>定义绘制线条的宽度</td>\n</tr>\n<tr>\n<td><code>beginPath()</code></td>\n<td>开始一个新的绘制路径 </td>\n</tr>\n<tr>\n<td><code>moveTo(x,y)</code></td>\n<td>移动画笔到指定的坐标点(x,y)，该点就是新的子路径的起始点 </td>\n</tr>\n<tr>\n<td><code>lineTo(x,y)</code></td>\n<td>使用直线边接当前端点和指定的坐标点(x,y) </td>\n</tr>\n<tr>\n<td><code>stroke()</code></td>\n<td>沿着绘制路径的坐标点顺序绘制直线 </td>\n</tr>\n<tr>\n<td><code>closePath()</code></td>\n<td>如果当前的绘制路径是打开的，则关闭掉该绘制路径</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>这里需要注意的是，当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。</p>\n<p>下面的代码绘制了一个三角形：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (canvas.getContext)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">        ctx.beginPath();</span><br><span class=\"line\">        ctx.moveTo(<span class=\"number\">75</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">        ctx.lineTo(<span class=\"number\">100</span>,<span class=\"number\">75</span>);</span><br><span class=\"line\">        ctx.lineTo(<span class=\"number\">100</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\">        ctx.fill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"canvas-圆弧\">canvas 圆弧<a href=\"post/html5-canvas#canvas-圆弧\"></a></h2><p>绘制路径我们可以使用<code>arc()</code>方法。该方法有六个参数：<code>x,y</code>为绘制圆弧所在圆上的圆心坐标。<code>radius</code>为半径。<code>startAngle</code>以及<code>endAngle</code>参数用弧度定义了开始以及结束的弧度。这些都是以x轴为基准。参数<code>anticlockwise</code>为一个布尔值。为<code>true</code>时，是逆时针方向，否则顺时针方向。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mycanvas\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">ctx.beginPath();</span><br><span class=\"line\">ctx.arc(<span class=\"number\">95</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></div></figure>\n<p>注意：arc()函数中的角度单位是弧度，不是度数。角度与弧度的js表达式:radians=(Math.PI/180)*degrees。</p>\n<h2 id=\"canvas-文本\">canvas 文本<a href=\"post/html5-canvas#canvas-文本\"></a></h2><p>canvas 提供了两种方法来渲染文本：</p>\n<p><code>fillText(text, x, y [, maxWidth])</code> 在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的。</p>\n<p><code>strokeText(text, x, y [, maxWidth])</code> 在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的。</p>\n<p>文本被填充方式：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mycanvas\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">ctx.font=<span class=\"string\">\"30px Arial\"</span>;</span><br><span class=\"line\">ctx.fillText(<span class=\"string\">\"Hello World\"</span>,<span class=\"number\">10</span>,<span class=\"number\">50</span>);</span><br></pre></td></tr></table></div></figure>\n<p>文本边框备绘制方式：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mycanvas\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">ctx.font=<span class=\"string\">\"30px Arial\"</span>;</span><br><span class=\"line\">ctx.strkeText(<span class=\"string\">\"Hello World\"</span>,<span class=\"number\">10</span>,<span class=\"number\">50</span>);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"canvas-图像\">canvas 图像<a href=\"post/html5-canvas#canvas-图像\"></a></h2><p>引入图像到<code>canvas</code>里需要以下两步基本操作：</p>\n<ol>\n<li>获取一个指向<code>HTMLImageElement</code>的对象或者另一个<code>canvas</code>元素的引用作为源，也可以通过提供一个URL的方式来使用图片。</li>\n<li>使用<code>drawImage()</code>函数将图片绘制到画布上。</li>\n</ol>\n<p>获取图片和绘制图片，下面只展示最简单的一种：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mycanvas\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> img=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">ctx.drawImage(img,<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></div></figure>\n<p><code>drawImage</code>有三个参数：<code>drawImage(image, x, y)</code>。其中<code>image</code>是<code>image</code>或者 <code>canvas</code>对象，<code>x</code>和<code>y</code>是其在目标<code>canvas</code>里的起始坐标。</p>\n<h2 id=\"小结\">小结<a href=\"post/html5-canvas#小结\"></a></h2><p>今天已经很晚了，关于<code>canvas</code>暂时就先到这里，以上就是关于canvas的基础功能的一些总结。</p>\n","prev":{"title":"使用JS和Canvas做一个画板","link":"post/drawing-borad"},"next":{"title":"堆排序解析及JavaScript实现","link":"post/heap-sort"},"plink":"https://blog.zhoushuo.me/post/html5-canvas/","toc":[{"title":"创建一个canvas","id":"创建一个canvas","index":"1"},{"title":"渲染上下文","id":"渲染上下文","index":"2"},{"title":"检查浏览器兼容性","id":"检查浏览器兼容性","index":"3"},{"title":"canvas 坐标","id":"canvas-坐标","index":"4"},{"title":"绘制 canvas 图形","id":"绘制-canvas-图形","index":"5"},{"title":"canvas 路径","id":"canvas-路径","index":"6"},{"title":"canvas 圆弧","id":"canvas-圆弧","index":"7"},{"title":"canvas 文本","id":"canvas-文本","index":"8"},{"title":"canvas 图像","id":"canvas-图像","index":"9"},{"title":"小结","id":"小结","index":"10"}],"copyright":{"author":"zhoushuo","link":"<a href=\"https://blog.zhoushuo.me/post/html5-canvas/\" title=\"HTML5 Canvas 基础\">https://blog.zhoushuo.me/post/html5-canvas/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}